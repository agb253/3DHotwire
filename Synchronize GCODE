''The synchronization program will:

Read in the GCODE file.
Remove everything except the coordinates.
Separate each layer into its own list. P1 and P2 are the top and bottom perimeters. The interior perimeters will be called iP1 through iPN from top to bottom
Starting with the first location in the gcode for both P1[1] and P2[1] (in this example, let's suppose we only have one part), find the distance of each point on iP1 to the line.
Store the closest point to the line as C-iPN (closest interior perimeter point).
Repeat step 4 and step 5 for every iPN (interior layers: iP1, iP2,...,iPN), storing the closest point on each iP to the line created in step 4.
Calculate the sum of the distances of C-iP's to the line (r^2). Store this number as the objective function.
Remain on the same point on P1 or P1[1], but now draw a line to the next coordinate on P2 or P2[2].Â  (OBJ[1,1]= the objective function for P1[1] to P2[1], OBJ[1,2]=P1[1] to P2[2])
Repeat step 4 through 8 for every coordinate in P2[1 through n].
Find the lowest OBJ[1,j]; that is the P2[j] coordinate that should be synchronized with P1[1].
For every point on P1[1 through N], repeat step 4-10.
Repeat for every part.''

import re
from tkinter import Tk
from tkinter.filedialog import askopenfilename
import time

Tk().withdraw() 
filename = askopenfilename()#prompt user to select the gcode file


i=1
coords= []
coordinates = []
with open(filename) as gcode:

    for line in gcode:
        line = line.strip()
        coord = re.findall(r'[XY].?\d+.\d+', line)
        if coord:
            a = coord[0]
            b = coord[1]
            aa = float(a[1:])
            bb = float(b[1:])
            c = [aa,bb,i]
            coords.append(c)
            i=i+1
        elif "layer_num" in line:
            coordinates.append(coords)
            coords = []


####calculate the shortest distance between a point and line(defined by two points)
import numpy as np
P1 = coordinates[1] #first layer is not coordinates[0] as that is blank
P2 = coordinates[len(coordinates)-1]#last layer
j = 0 #top profile coordinate iterator
k = 0 #bottom profile iterator
l = 2 #interior layer iterator. Starts at 2 because first layer is empty [], and the first layer is P1
m = 0 #interior coordinate iterator
min_dist = 99999999.9 #some large distance for each point in a layer
sum_min_dist = 0
lowest_dist = 9999999.9#some large distance for total of layer's minimum distance

start = time.time()

def distance(p, q, rs):
    x = p-q
    return np.linalg.norm(
        np.outer(np.dot(rs-q, x)/np.dot(x, x), x)+q-rs,
        axis=1)

for sets in P1:
    for points in P2:
        while l < len(coordinates)-1: #don't count the first layer as it is blank [] and don't use P1, start at coordinates[2] to last coordinate -1
            while m < len(coordinates[l]):
                p = np.array(P1[j]) #coord of top profile
                q = np.array(P2[k]) #coord of bottom profile
                rs = np.array(coordinates[l][m])#interior layer at the m-th point
                d = distance(p, q, rs)

                if min_dist > d: #first time around min_dist should be large number, so this will be true
                    min_dist = d #distance to the closest coordinate [m] on a layer [l]
                    #print("min_dist " +str(min_dist))
                m = m + 1 #next coordinate on the same layer [l]
                #end result is min_dist is equal to the distance to the closest coordinate
            sum_min_dist = sum_min_dist + min_dist #sum of the closest coordinate distances on each layer 

            l = l +20 #next layer. You can skip layers by making l+ some number of skipped layers
            min_dist = 9999999.9 #initialize at some large distance
            m = 0
            #which coordinate on P2 has the lowest sum_min_dist?
        #print(sum_min_dist)
        if sum_min_dist < lowest_dist: #if the sum of the closest distances for all layers is less than
            lowest_dist = sum_min_dist #the previous lowest sum of closest distance, then it may be a synch point
            synch_coord = P2[k] #so keep that new lowest distance and coordinate in memory

        sum_min_dist = 0 #reset the sum of the closest coordinates and try the next coordinate on P2

        k = k + 1 #try the next coordinate on P2
        l = 2
    print(str(P1[j]) +" and " +str(synch_coord))
    end = time.time()
    print(end - start)
    j = j + 1 #next coordinate on P1
    lowest_dist = 9999999.9 #some large number
    k = 0
